//Time complexity of this solution is O(N!)

.......firstly make the nXn into different submatrices and then calculate the determinant of each matrix and calculate the result
  
vector<vector<int>>submatrix(vector<vector<int>>matrix,int n,int r,int c)
    {
        vector<vector<int>>mad;
        for(int i=0;i<n;i++)
        {
            if(i==r)
            {
                continue;
            }
            vector<int>row;
            for(int j=0;j<n;j++)
            {
                if(j==c)
                {
                    continue;
                }
                    row.push_back(matrix[i][j]);
            }
            mad.push_back(row);
        }
        return mad;
    }
    int determinantOfMatrix(vector<vector<int> > matrix, int n)
    {
        // code here 
        if(n==1)
        {
            return matrix[0][0];
        }
        else if(n==2)
        {
            return ((matrix[0][0]*matrix[1][1])-(matrix[0][1]*matrix[1][0]));
        }
        int det=0;
        for(int i=0;i<n;i++)
        {
            vector<vector<int>>mad=submatrix(matrix,n,0,i);
            int result=determinantOfMatrix(mad,n-1);
            if(i&1)
            {
                det-=matrix[0][i]*result;
            }
            else
            {
                det+=matrix[0][i]*result;
            }
        }
        return det;
    }
